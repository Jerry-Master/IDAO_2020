model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
sat <- 37
coord <- 5
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
sat <- 37
coord <- 6
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
model <- function(sat, coord, num_model, pred=F) {
t1 <- unlist(TT[sat+1,coord])
if (!pred) {
tr <- train %>% filter(sat_id == sat)
total <- length(tr$epoch)
limit <- as.integer(0.8 * total)
val <- tr[limit:total,]
tr <- tr[1:(limit-1),]
tr$aux <- unlist(tr[,coord+3])
val$aux <- unlist(val[,coord+3])
} else {
tr <- train %>% filter(sat_id == sat)
tst <- test %>% filter(sat_id == sat)
tr$aux <- unlist(tr[,coord+3])
tst$aux <- unlist(tst[,coord+3])
}
if (num_model == 1) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 2) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch), tr)
} else if (num_model == 3) {
lmX <- lm(aux ~ epoch+epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+epoch*x_sim+epoch*y_sim+epoch*z_sim+epoch*Vx_sim+epoch*Vy_sim+epoch*Vz_sim, tr)
} else if (num_model == 4) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 5) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch), tr)
} else if (num_model == 6) {
lmX <- lm(aux ~ sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+x_sim+y_sim+z_sim, tr)
}
#print(summary(lmX))
if (!pred) score(predict(lmX, val), unlist(val[,coord+3]))
else predict(lmX, tst)
}
sat <- 37
coord <- 6
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
sat <- 37
coord <- 5
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
sat <- 37
coord <- 4
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
model <- function(sat, coord, num_model, pred=F) {
t1 <- unlist(TT[sat+1,coord])
if (!pred) {
tr <- train %>% filter(sat_id == sat)
total <- length(tr$epoch)
limit <- as.integer(0.8 * total)
val <- tr[limit:total,]
tr <- tr[1:(limit-1),]
tr$aux <- unlist(tr[,coord+3])
val$aux <- unlist(val[,coord+3])
} else {
tr <- train %>% filter(sat_id == sat)
tst <- test %>% filter(sat_id == sat)
tr$aux <- unlist(tr[,coord+3])
tst$aux <- unlist(tst[,coord+3])
}
if (num_model == 1) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 2) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch), tr)
} else if (num_model == 3) {
lmX <- lm(aux ~ epoch+epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+epoch*x_sim+epoch*y_sim+epoch*z_sim+epoch*Vx_sim+epoch*Vy_sim+epoch*Vz_sim, tr)
} else if (num_model == 4) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 5) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch), tr)
} else if (num_model == 6) {
lmX <- lm(aux ~ sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+x_sim, tr)
}
#print(summary(lmX))
if (!pred) score(predict(lmX, val), unlist(val[,coord+3]))
else predict(lmX, tst)
}
sat <- 37
coord <- 4
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
model <- function(sat, coord, num_model, pred=F) {
t1 <- unlist(TT[sat+1,coord])
if (!pred) {
tr <- train %>% filter(sat_id == sat)
total <- length(tr$epoch)
limit <- as.integer(0.8 * total)
val <- tr[limit:total,]
tr <- tr[1:(limit-1),]
tr$aux <- unlist(tr[,coord+3])
val$aux <- unlist(val[,coord+3])
} else {
tr <- train %>% filter(sat_id == sat)
tst <- test %>% filter(sat_id == sat)
tr$aux <- unlist(tr[,coord+3])
tst$aux <- unlist(tst[,coord+3])
}
if (num_model == 1) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 2) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch), tr)
} else if (num_model == 3) {
lmX <- lm(aux ~ epoch+epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+epoch*x_sim+epoch*y_sim+epoch*z_sim+epoch*Vx_sim+epoch*Vy_sim+epoch*Vz_sim, tr)
} else if (num_model == 4) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 5) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch), tr)
} else if (num_model == 6) {
lmX <- lm(aux ~ sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+Vx_sim, tr)
}
#print(summary(lmX))
if (!pred) score(predict(lmX, val), unlist(val[,coord+3]))
else predict(lmX, tst)
}
sat <- 37
coord <- 4
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
model <- function(sat, coord, num_model, pred=F) {
t1 <- unlist(TT[sat+1,coord])
if (!pred) {
tr <- train %>% filter(sat_id == sat)
total <- length(tr$epoch)
limit <- as.integer(0.8 * total)
val <- tr[limit:total,]
tr <- tr[1:(limit-1),]
tr$aux <- unlist(tr[,coord+3])
val$aux <- unlist(val[,coord+3])
} else {
tr <- train %>% filter(sat_id == sat)
tst <- test %>% filter(sat_id == sat)
tr$aux <- unlist(tr[,coord+3])
tst$aux <- unlist(tst[,coord+3])
}
if (num_model == 1) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 2) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch), tr)
} else if (num_model == 3) {
lmX <- lm(aux ~ epoch+epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+epoch*x_sim+epoch*y_sim+epoch*z_sim+epoch*Vx_sim+epoch*Vy_sim+epoch*Vz_sim, tr)
} else if (num_model == 4) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 5) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch), tr)
} else if (num_model == 6) {
lmX <- lm(aux ~ sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch), tr)
}
#print(summary(lmX))
if (!pred) score(predict(lmX, val), unlist(val[,coord+3]))
else predict(lmX, tst)
}
sat <- 37
coord <- 4
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
model <- function(sat, coord, num_model, pred=F) {
t1 <- unlist(TT[sat+1,coord])
if (!pred) {
tr <- train %>% filter(sat_id == sat)
total <- length(tr$epoch)
limit <- as.integer(0.8 * total)
val <- tr[limit:total,]
tr <- tr[1:(limit-1),]
tr$aux <- unlist(tr[,coord+3])
val$aux <- unlist(val[,coord+3])
} else {
tr <- train %>% filter(sat_id == sat)
tst <- test %>% filter(sat_id == sat)
tr$aux <- unlist(tr[,coord+3])
tst$aux <- unlist(tst[,coord+3])
}
if (num_model == 1) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 2) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch), tr)
} else if (num_model == 3) {
lmX <- lm(aux ~ epoch+epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+epoch*x_sim+epoch*y_sim+epoch*z_sim+epoch*Vx_sim+epoch*Vy_sim+epoch*Vz_sim, tr)
} else if (num_model == 4) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 5) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch), tr)
} else if (num_model == 6) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch), tr)
}
#print(summary(lmX))
if (!pred) score(predict(lmX, val), unlist(val[,coord+3]))
else predict(lmX, tst)
}
sat <- 37
coord <- 4
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
model <- function(sat, coord, num_model, pred=F) {
t1 <- unlist(TT[sat+1,coord])
if (!pred) {
tr <- train %>% filter(sat_id == sat)
total <- length(tr$epoch)
limit <- as.integer(0.8 * total)
val <- tr[limit:total,]
tr <- tr[1:(limit-1),]
tr$aux <- unlist(tr[,coord+3])
val$aux <- unlist(val[,coord+3])
} else {
tr <- train %>% filter(sat_id == sat)
tst <- test %>% filter(sat_id == sat)
tr$aux <- unlist(tr[,coord+3])
tst$aux <- unlist(tst[,coord+3])
}
if (num_model == 1) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 2) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch), tr)
} else if (num_model == 3) {
lmX <- lm(aux ~ epoch+epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+epoch*x_sim+epoch*y_sim+epoch*z_sim+epoch*Vx_sim+epoch*Vy_sim+epoch*Vz_sim, tr)
} else if (num_model == 4) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 5) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch), tr)
} else if (num_model == 6) {
lmX <- lm(aux ~ epoch*epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch), tr)
}
#print(summary(lmX))
if (!pred) score(predict(lmX, val), unlist(val[,coord+3]))
else predict(lmX, tst)
}
sat <- 37
coord <- 4
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
model <- function(sat, coord, num_model, pred=F) {
t1 <- unlist(TT[sat+1,coord])
if (!pred) {
tr <- train %>% filter(sat_id == sat)
total <- length(tr$epoch)
limit <- as.integer(0.8 * total)
val <- tr[limit:total,]
tr <- tr[1:(limit-1),]
tr$aux <- unlist(tr[,coord+3])
val$aux <- unlist(val[,coord+3])
} else {
tr <- train %>% filter(sat_id == sat)
tst <- test %>% filter(sat_id == sat)
tr$aux <- unlist(tr[,coord+3])
tst$aux <- unlist(tst[,coord+3])
}
if (num_model == 1) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 2) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch), tr)
} else if (num_model == 3) {
lmX <- lm(aux ~ epoch+epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+epoch*x_sim+epoch*y_sim+epoch*z_sim+epoch*Vx_sim+epoch*Vy_sim+epoch*Vz_sim, tr)
} else if (num_model == 4) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 5) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch), tr)
} else if (num_model == 6) {
lmX <- lm(aux ~ ln(epoch)+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch), tr)
}
#print(summary(lmX))
if (!pred) score(predict(lmX, val), unlist(val[,coord+3]))
else predict(lmX, tst)
}
sat <- 37
coord <- 4
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
model <- function(sat, coord, num_model, pred=F) {
t1 <- unlist(TT[sat+1,coord])
if (!pred) {
tr <- train %>% filter(sat_id == sat)
total <- length(tr$epoch)
limit <- as.integer(0.8 * total)
val <- tr[limit:total,]
tr <- tr[1:(limit-1),]
tr$aux <- unlist(tr[,coord+3])
val$aux <- unlist(val[,coord+3])
} else {
tr <- train %>% filter(sat_id == sat)
tst <- test %>% filter(sat_id == sat)
tr$aux <- unlist(tr[,coord+3])
tst$aux <- unlist(tst[,coord+3])
}
if (num_model == 1) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 2) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch), tr)
} else if (num_model == 3) {
lmX <- lm(aux ~ epoch+epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+epoch*x_sim+epoch*y_sim+epoch*z_sim+epoch*Vx_sim+epoch*Vy_sim+epoch*Vz_sim, tr)
} else if (num_model == 4) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 5) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch), tr)
} else if (num_model == 6) {
lmX <- lm(aux ~ log(epoch)+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch), tr)
}
#print(summary(lmX))
if (!pred) score(predict(lmX, val), unlist(val[,coord+3]))
else predict(lmX, tst)
}
sat <- 37
coord <- 4
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
model <- function(sat, coord, num_model, pred=F) {
t1 <- unlist(TT[sat+1,coord])
if (!pred) {
tr <- train %>% filter(sat_id == sat)
total <- length(tr$epoch)
limit <- as.integer(0.8 * total)
val <- tr[limit:total,]
tr <- tr[1:(limit-1),]
tr$aux <- unlist(tr[,coord+3])
val$aux <- unlist(val[,coord+3])
} else {
tr <- train %>% filter(sat_id == sat)
tst <- test %>% filter(sat_id == sat)
tr$aux <- unlist(tr[,coord+3])
tst$aux <- unlist(tst[,coord+3])
}
if (num_model == 1) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 2) {
lmX <- lm(aux ~ epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+epoch*sin(4*pi/t1*epoch)+epoch*cos(4*pi/t1*epoch)+epoch*sin(6*pi/t1*epoch)+epoch*cos(6*pi/t1*epoch)+epoch*sin(8*pi/t1*epoch)+epoch*cos(8*pi/t1*epoch)+epoch*sin(10*pi/t1*epoch)+epoch*cos(10*pi/t1*epoch), tr)
} else if (num_model == 3) {
lmX <- lm(aux ~ epoch+epoch*sin(2*pi/t1*epoch)+epoch*cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+epoch*x_sim+epoch*y_sim+epoch*z_sim+epoch*Vx_sim+epoch*Vy_sim+epoch*Vz_sim, tr)
} else if (num_model == 4) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch)+x_sim+y_sim+z_sim+Vx_sim+Vy_sim+Vz_sim, tr)
} else if (num_model == 5) {
lmX <- lm(aux ~ epoch+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch)+sin(4*pi/t1*epoch)+cos(4*pi/t1*epoch)+sin(6*pi/t1*epoch)+cos(6*pi/t1*epoch)+sin(8*pi/t1*epoch)+cos(8*pi/t1*epoch)+sin(10*pi/t1*epoch)+cos(10*pi/t1*epoch), tr)
} else if (num_model == 6) {
lmX <- lm(aux ~ log(epoch+1)+sin(2*pi/t1*epoch)+cos(2*pi/t1*epoch), tr)
}
#print(summary(lmX))
if (!pred) score(predict(lmX, val), unlist(val[,coord+3]))
else predict(lmX, tst)
}
sat <- 37
coord <- 4
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
sat <- 37
coord <- 6
model(sat, coord, ans[sat+1,coord+1])
model(sat, coord, 6)
plotea <- function(sat, coors) {
ddi <- filter(train, sat_id == sat)
for (c in coors) {
plot(ddi$epoch, unlist(ddi[,c+3]))
}
}
plotea(37, c(4,5,6))
3.986 044 418e14
3.986044418e14
train$r <- sqrt(train$x^2 + train$y^2 + train$z^2)
train$v <- sqrt(train$Vx^2 + train$Vy^2 + train$Vz^2)
GM <- 3.986044418e14
plot(1/train$r, train$v^2)
1/train$r
train$v^2
plot(1/train$r, train$v^2)
train$r^-1
train$r^-1*GM
plot(GM/train$r, train$v^2)
mod1 <- glm(v ~ GM*r^-1, data = train, family=gaussian(link=poly(x,2)))
mod1 <- glm(v ~ GM*r^-1, data = train, family=gaussian(link=poly(v,2)))
mod1 <- glm(v ~ GM*r^-1, data = train, family=gaussian(link=^2)
mod1 <- glm(v^2 ~ GM*r^-1, data = train, family=gaussian(link=identity)
summary(mod1)
mod1 <- glm(v^2 ~ GM*r^-1, data = train, family=gaussian(link="identity")
summary(mod1)
mod1 <- glm(v^2 ~ GM*r^-1, data = train, family=gaussian(link="identity"))
mod1 <- glm(v*v ~ GM*r^-1, data = train, family=gaussian(link="identity"))
train$vv <- train$v^2
mod1 <- glm(vv ~ GM*r^-1, data = train, family=gaussian(link="identity"))
train$vv <- train$v^2
train$rr <- GM*train$r^-1
mod1 <- glm(vv ~ rr, data = train, family=gaussian(link="identity"))
summary(mod1)
train$vv <- train$v^2
train$rr <- GM*train$r^-1
mod1 <- glm(vv ~ rr, data = train, family=gaussian(link="identity"))
summary(mod1)
plot(GM/train$r, train$v^2)
points(train$rr, predict(mod1), col="blue")
train37$r <- sqrt(train37$x^2 + train37$y^2 + train37$z^2)
train37$v <- sqrt(train37$Vx^2 + train37$Vy^2 + train37$Vz^2)
GM <- 3.986044418e14
plot(GM/train37$r, train37$v^2)
train37$vv <- train37$v^2
train37$rr <- GM*train37$r^-1
mod1 <- glm(vv ~ rr, data = train37, family=gaussian(link="identity"))
summary(mod1)
plot(GM/train37$r, train37$v^2)
points(train37$rr, predict(mod1), col="blue")
train37$vv <- train37$v^2
train37$rr <- GM*train37$r^-1
mod1 <- lm(vv ~ rr, data = train37)
summary(mod1)
plot(GM/train37$r, train37$v^2)
points(train37$rr, predict(mod1), col="blue")
plot(mod1, 1)
plot(mod1, 2)
plot(mod1, 1)
mod2 <- lm(Vx ~ v, data = train37)
summary(mod2)
plot(train37$v, train37$Vx)
points(train37$v, predict(mod2), col="blue")
plot(train37$v, train37$Vx)
points(train37$v, predict(mod2), col="blue")
mod2 <- lm(Vx^2 ~ v^2, data = train37)
summary(mod2)
plot(train37$v, train37$Vx)
points(train37$v, predict(mod2), col="blue")
mod2 <- lm(Vx^2 ~ v^2, data = train37)
summary(mod2)
plot(train37$v^2, train37$Vx^2)
points(train37$v^2, predict(mod2), col="blue")
mod2 <- lm(Vx^2 ~ v^2+Vy^2+Vz^2, data = train37)
summary(mod2)
plot(train37$v^2, train37$Vx^2)
points(train37$v^2, predict(mod2), col="blue")
mod2 <- lm(v^2 ~ Vx^2+Vy^2+Vz^2, data = train37)
summary(mod2)
# plot(train37$v^2, train37$Vx^2)
# points(train37$v^2, predict(mod2), col="blue")
mod2 <- lm(Vx ~ v+x+y+z, data = train37)
summary(mod2)
# plot(train37$v^2, train37$Vx^2)
# points(train37$v^2, predict(mod2), col="blue")
mod2 <- lm(Vx ~ v+x+y+z+r, data = train37)
summary(mod2)
# plot(train37$v^2, train37$Vx^2)
# points(train37$v^2, predict(mod2), col="blue")
mod2 <- lm(Vx^2 ~ GM*x^-1, data = train37)
mod2 <- lm(Vx^2 ~ x^-1, data = train37)
mod2 <- lm(Vx^2 ~ x^(-1), data = train37)
mod2 <- lm(Vx^2 ~ x, data = train37)
summary(mod2)
plot(GM/train37$x, train37Vx^2)
mod2 <- lm(Vx^2 ~ x, data = train37)
summary(mod2)
plot(GM/train37$x, train37$Vx^2)
points(GM/train37$x, predict(mod2), col="blue")
mod2 <- lm(Vx^2 ~ GM/x, data = train37)
mod2 <- lm(Vx^2 ~ 1/x, data = train37)
summary(mod2)
plot(GM/train37$x, train37$Vx^2)
points(GM/train37$x, predict(mod2), col="blue")
mod2 <- lm(Vx^2 ~ 1/x, data = train37)
summary(mod2)
plot(1/train37$x, train37$Vx^2)
points(1/train37$x, predict(mod2), col="blue")
mod2 <- lm(Vx^2 ~ rr, data = train37)
summary(mod2)
plot(train37$rr, train37$Vx^2)
points(train37$rr, predict(mod2), col="blue")
atan(1)
atan(0)
train$r <- sqrt(train37$x^2 + train37$y^2 + train37$z^2)
to_sph <- function(df) {
df$r <- sqrt(df$x^2 + df$y^2 + df$z^2)
df$phi <- atan(df$y/df$x)
df <- acos(df$z/df$r)
df$v <- sqrt(df$Vx^2 + df$Vy^2 + df$Vz^2)
df$Vphi <- atan(df$Vy/df$Vx)
df$Vtheta <- acos(df$Vz/df$v)
df
}
train37 <- to_sph(train37)
to_sph <- function(df) {
df$r <- sqrt(df$x^2 + df$y^2 + df$z^2)
df$phi <- atan(df$y/df$x)
df$theta <- acos(df$z/df$r)
df$v <- sqrt(df$Vx^2 + df$Vy^2 + df$Vz^2)
df$Vphi <- atan(df$Vy/df$Vx)
df$Vtheta <- acos(df$Vz/df$v)
df
}
train37 <- to_sph(train37)
plot(train37$epoch, train37$theta)
points(train37$epoch, train37$Vtheta, col="blue")
plot(train37$epoch, train37$phi)
points(train37$epoch, train37$Vphi, col="blue")
plot(train37$epoch, train37$r)
points(train37$epoch, train37$v, col="blue")
plot(train37$epoch, train37$phi)
points(train37$epoch, train37$Vphi, col="blue")
plot(train37$epoch, train37$phi, type="l")
points(train37$epoch, train37$Vphi, col="blue")
plot(train37$epoch, train37$phi, type="l")
#points(train37$epoch, train37$Vphi, col="blue")
plot(train37$epoch, train37$phi, type="l")
points(train37$epoch, train37$Vphi, col="blue")
plot(train37$epoch, train37$phi)
points(train37$epoch, train37$Vphi, col="blue")
plot(train37$epoch, train37$phi)
points(train37$epoch, train37$Vphi, col="blue")
mod2 <- lm(Vphi ~ phi, data=train37)
summary(mod2)
plot(train37$phi, train37$Vphi)
points(train37$phi, predict(mod2), col="blue")
